#include "/home/pi/systemTest/library/allLib.h"
#include "library/sensor/LSM303.h"
#include "library/sensor/L3G.h"
#include "library/sensor/sensor.c"
#include "library/dynamixel/syncWrite.cpp"
#include <pthread.h>
#include "array.h"

pthread_mutex_t lock;

int command=0;

pthread_t thread1, thread2;

void *reading(void * arg){
	if(command==0){
		string status=bacaACC(Pacc_raw);
		pthread_t thread2=(pthread_t)arg;
		cout<<status<<endl;
		char *a=new char[status.size()+1];
		a[status.size()]=0;
		memcpy(a,status.c_str(),status.size());
	
		if(strcmp(a,"Depan")==0){
			command=1;
			while(command==1){
			pthread_mutex_lock(&lock);
			cout<<"berdiri tunggu 5 detik"<<endl;
			sleep(5);
			cout<<"lanjutkan"<<" Command: "<<command<<endl;
			status=bacaACC(Pacc_raw);
			a[status.size()]=0;
        		memcpy(a,status.c_str(),status.size());
			if(strcmp(a,"Depan")!=0){command=0;}
			pthread_mutex_unlock(&lock);	
		}
		sleep(1);
		}
	}
}

int id[2]={1,2};
int id2[18]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};
int pos1[2][2]={{512,512},{0,1000}};
int pos[2]={512,512};

void *jalan(void * arg){
	if (command==0){
		cout<<"jalan"<<endl;
		kirimPacketTorque(18,id2,1);
		kirimPacketSpeed(18,id2,100);
		kirimPacketGerak(18,7,1,id2,gerakAndre);
	//sleep(1);
	}
	//pthread_exit(&thread2);
}


void *list_thread(void *threadid){
	long tid;
	tid=(long)threadid;
	switch(tid){
		case 0: reading(NULL); break;
		case 1: jalan(NULL); break;
	}
	pthread_exit(NULL);
}

void *test1(void *arg){
	cout<<"1"<<endl;
}
void *test2(void *arg){
	cout<<"2"<<endl;
}



int main(){
	string status;
	enableIMU();
	if(dxl_initialize(0,1)==0){
		cout<<"Error Connecting Servo"<<endl;

	}


	else{
		cout<<"Connect Servo Berhasil"<<endl;
//		pthread_t thread1,thread2;
		while(1){
			pthread_t thread1,thread2;
			pthread_create(&thread1, NULL, reading,NULL);
			pthread_create(&thread2, NULL, jalan, NULL);
//			pthread_join(thread1,NULL);
//			pthread_join(thread2,NULL);
			sleep(2);
		}
	}
}

