#include <opencv2/opencv.hpp> 
#include <opencv2/core/core.hpp> 
#include <opencv2/imgproc/imgproc.hpp> 
#include <opencv2/highgui/highgui.hpp> 
#include <iostream> 
#include <stdio.h> 
#include <termio.h> 
#include <unistd.h> 
#include <dynamixel.h> 
#include <termios.h> 
#include <time.h> 
#include <errno.h>
#include <stdlib.h>

using namespace cv;
using namespace std;

#define P_GOAL_POSITION 30

const string windowName = "Kamera"; 
const int FRAME_WIDTH = 640; 
const int FRAME_HEIGHT = 480; 
int serX = 512; 
int serY = 512; 
int id[2]={1,2}; 
int pos[2]={serX,serY}; 
int pos2[2]={600,600}; 
double area; 
int x=0; 
int y=0; 
int statX; 
int statY; 
int lastX;
int lastY;

Mat webcam; 
Mat hsv;
Mat thresh;

void kirimPacket(int totalServo, int id[],int data[],int datapers); 
void EPMoments(Mat thresh1); 
int pixelmap(int x, int y);
void morph(Mat thresh2);

 void morph(Mat thresh2){
        Mat erodeElement = getStructuringElement( MORPH_RECT,Size(3,3));
        Mat dilateElement = getStructuringElement( MORPH_RECT,Size(8,8));
        erode(thresh2,thresh2,erodeElement);
        dilate(thresh2,thresh2,dilateElement);
}


 void kirimPacket(int totalServo, int id[],int data[],int datapers){
        int l=datapers;
        int n=totalServo;
        int i=0;

 void EPMoments(Mat thresh1){
        dxl_set_txpacket_id(BROADCAST_ID); //Jangan diubah 0xFE int px,py,ex,ey,temp;
        //dxl_set_txpacket_length(); //jumlah paket yang dikirim 0x18 double refArea = 50;
        dxl_set_txpacket_instruction(INST_SYNC_WRITE);//instruksi 0x83 float KpX=0.1;
        dxl_set_txpacket_parameter(0,P_GOAL_POSITION);//yang mau ditulis 0x1E float KpY=0.075;
        dxl_set_txpacket_parameter(1,2);//Jumlah data per servo Moments moment = moments (thresh1);
        for( i; i<totalServo;i++){	area = moment.m00;
                dxl_set_txpacket_parameter(2+3*i+0,id[i]); if(area >= refArea){
                dxl_set_txpacket_parameter(2+3*i+1,dxl_get_lowbyte(data[i])); x = moment.m10/area;
                dxl_set_txpacket_parameter(2+3*i+2,dxl_get_highbyte(data[i])); y = moment.m01/area;
        }		if (pixelmap(x,y) != 0)
		temp = pixelmap(x,y);
        dxl_set_txpacket_length((l+1)*n+4); switch (temp)
        dxl_txrx_packet(); {
}			case 11 : statX= 15; statY= 10; break;
			case 12 : statX= 0; statY= 10; break;
			case 13 : statX=-15; statY= 10; break;
			case 21 : statX= 15; statY= 0; break;
			case 22 : statX= 0; statY= 0; break;
			case 23 : statX=-15; statY= 0; break;
			case 31 : statX= 15; statY=-10; break;
			case 32 : statX= 0; statY=-10; break;
			case 33 : statX=-15; statY=-10; break;
		}
		//PID
		ex=lastX-x; ey=lastY-y;
		if (ex>214 || (ex<24 && ex>-24) || ex<-214) ex=0;
		if (ey>161 || (ey<18 && ey>-18) || ey<-161) ey=0;
		serX=serX+statX;
		serY=serY+statY;
		px=ex*KpX;
		py=ey*KpY;
		if (statX==0) px=0;
		if (statY==0) py=0;
		serY=serY+py;
		serX=serX+px;
		 if (serY < 0){
		serY=1023-serY;
		}
		pos[0]=serX;
		pos[1]=serY;
		printf ("bola : (%d,%d) servo : (%d,%d) \n",x,y,pos[0],pos[1]);
	 }
}

int pixelmap (int x, int y) {
	int Matriks=0;
	if (( x<=FRAME_WIDTH/3 ) && (y<=FRAME_HEIGHT/3)) Matriks = 11; else
	if (((x<=FRAME_WIDTH/3*2) && (x>FRAME_WIDTH/3)) && (y<=FRAME_HEIGHT/3)) Matriks = 12; else
	if (((x<=FRAME_WIDTH ) && (x>FRAME_WIDTH/3*2)) && (y<=FRAME_HEIGHT/3)) Matriks = 13; else
	if (( x<=FRAME_WIDTH/3 ) && (y<=FRAME_HEIGHT/3*2)) Matriks = 21; else
	if (((x<=FRAME_WIDTH/3*2) && (x>FRAME_WIDTH/3)) && (y<=FRAME_HEIGHT/3*2)) Matriks = 22; else
	if (((x<=FRAME_WIDTH ) && (x>FRAME_WIDTH/3*2)) && (y<=FRAME_HEIGHT/3*2)) Matriks = 23; else
	if (( x<=FRAME_WIDTH/3 ) && (y<=FRAME_HEIGHT)) Matriks = 31; else
	if (((x<=FRAME_WIDTH/3*2) && (x>FRAME_WIDTH/3)) && (y<=FRAME_HEIGHT)) Matriks = 32; else
	if (((x<=FRAME_WIDTH ) && (x>FRAME_WIDTH/3*2)) && (y<=FRAME_HEIGHT)) Matriks = 33;
	return (Matriks);
}

 int main(){
	VideoCapture cap(0);
	cap.set(CAP_PROP_FRAME_WIDTH,FRAME_WIDTH);
        cap.set(CAP_PROP_FRAME_HEIGHT,FRAME_HEIGHT);
	if(!cap.isOpened())
		return -1;
	if(dxl_initialize(0,1)==0){
                cout<<"Error connecting"<<endl;
                return 0;
        }
        else{
                cout<<"connect success!"<<endl;
	}
	while(1){
		cap.read(webcam);
		cvtColor(webcam,hsv,COLOR_BGR2HSV);
		inRange(hsv,Scalar(2,186,60),Scalar(255,255,255),thresh);
		EPMoments(thresh);
	 	morph(thresh);
		kirimPacket(2,id,pos,2);
		imshow(windowName,thresh);
	 	if(waitKey(30) >= 0) break;
		usleep(100);
 }
}
