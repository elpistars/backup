#include <opencv2/opencv.hpp> 
#include <opencv2/core/core.hpp> 
#include <opencv2/imgproc/imgproc.hpp> 
#include <opencv2/highgui/highgui.hpp> 
#include "/home/pi/systemTest/library/allLib.h"
#include "/home/pi/systemTest/gerakan.cpp"
#include <math.h>

using namespace cv;
using namespace std;

#define P_GOAL_POSITION 30
#define _USE_MATH_DEFINES

const string windowName = "Kamera"; 
const int FRAME_WIDTH = 320; 
const int FRAME_HEIGHT = 240; 
int serX = 512; 
int serY = 512; 
int command=0;
int commandMotor=0;
//int id[2]={19,20}; 
int pos[2]={serX,serY}; 
int pos2[2]={600,600}; 
double area; 
int x=0; 
int y=0; 
int statX; 
int statY; 
int lastX;
int lastY;
int commandFind=0;
int loseBall;
int commandSearch=0;
int commandCam=0;
int comms=0;
int commandMove=0;
int moving=0;
VideoCapture cap(0);
pthread_mutex_t locking,locking2,locking3,locking4;

Mat webcam; 
Mat hsv;
Mat thresh;

void kirimPacket(int totalServo, int id[],int data[],int datapers); 
void EPMoments(Mat thresh1); 
int pixelmap(int x, int y);
void morph(Mat thresh2);


void kirimPacket(int totalServo, int id[],int data[],int datapers){
    int l=datapers;
    int n=totalServo;
    int i=0;
    dxl_set_txpacket_id(BROADCAST_ID); //Jangan diubah 0xFE
    //dxl_set_txpacket_length(); //jumlah paket yang dikirim 0x18
    dxl_set_txpacket_instruction(INST_SYNC_WRITE);//instruksi 0x83
	dxl_set_txpacket_parameter(0,P_GOAL_POSITION);//yang mau ditulis 0x1E
    dxl_set_txpacket_parameter(1,2);//Jumlah data per servo
    for( i; i<totalServo;i++){
        dxl_set_txpacket_parameter(2+3*i+0,id[i]);
        dxl_set_txpacket_parameter(2+3*i+1,dxl_get_lowbyte(data[i]));
        dxl_set_txpacket_parameter(2+3*i+2,dxl_get_highbyte(data[i]));
    }
    dxl_set_txpacket_length((l+1)*n+4);
    dxl_txrx_packet();
}




 void morph(Mat thresh2){
    Mat erodeElement = getStructuringElement( MORPH_RECT,Size(3,3));
    Mat dilateElement = getStructuringElement( MORPH_RECT,Size(8,8));
    erode(thresh2,thresh2,erodeElement);
    dilate(thresh2,thresh2,dilateElement);
}

 void EPMoments(Mat thresh1){
    float pX,pY,dX,dY,pdX,pdY,rate_X,rate_Y,error_X,error_Y,degree,tanteta,dist,distRL;
    int temp;
    float intercept = -80.89;
    float slope = 0.2988;
    int sp_X=FRAME_WIDTH/2;
    int sp_Y=FRAME_HEIGHT/2;
    double refArea = 10000;
    float KpX=0.065;
    float KpY=0.04;
    float KdX=0.024;
    float KdY=0.03;
    int tinggi = 35;
	Moments moment = moments (thresh1);
    area = moment.m00;
    if(area<refArea){
	pid(175);
	moving=0;
	area=moment.m00;
	if(loseBall==2){commandSearch=0; moving=0;sleep(4);loseBall=0;} 
	else if(area<refArea){loseBall++;sleep(1);} 
    }
    if(area >= refArea){
		//pid(175);
		loseBall=0;
		x = moment.m10/area;
	    y = moment.m01/area;
	
		if (pixelmap(x,y) != 0)
	        temp = pixelmap(x,y);
                	
		switch (temp){
            case 11 : statX= 12; statY= 7; break;
            case 12 : statX=  0; statY= 7; break;
	    case 13 : statX=-12; statY= 7; break;
            case 21 : statX= 12; statY=  0; break;
            case 22 : statX=  0; statY=  0; break;
	    case 23 : statX=-12; statY=  0; break;
            case 31 : statX= 12; statY=-7; break;
            case 32 : statX=  0; statY=-7; break;
            case 33 : statX=-12; statY=-7; break;
        }	


        //PID
        error_X=sp_X-x; //Error Value
        error_Y=sp_Y-y; //Error Value

	serX=serX+statX; //Horizontal Servo Value for Future
        serY=serY+statY; //Vertical Servo Value for Future

        pX=error_X*KpX;
        pY=error_Y*KpY;


        if (statX==0) pX=0;
      	if (statY==0) pY=0;

        rate_X=error_X-lastX;
       	rate_Y=error_Y-lastY;

       	dX=rate_X*KdX;
       	dY=rate_Y*KdY;

       	pdX=pX+dX;
       	pdY=pY+dY;

        pos[0]=serX+pdX;
       	pos[1]=serY+pdY;

	lastX=error_X;
        lastY=error_Y;

	if(pos[1] < 0){pos[1]=0;}
        if(pos[0] > 762){pos[0]=762;}
        if(pos[1] > 1023){pos[1]=1023;}
	if(pos[0] < 262){pos[0]=262;}

	kirimPacket(2,idh,pos,2);

        cout<<"Area: "<<area<<endl;
	kirimPacket(2,idh,pos,2);

	degree = 180*(pos[1]-256)/512;
        tanteta = tan(degree*M_PI/180);
        dist = tanteta*tinggi;
	distRL = intercept + slope*pos[1];

	printf ("bola : (%d,%d) servo : (%d,%d) \n Jarak : (%0.1f)",x,y,pos[0],pos[1],distRL);

	}
}

int pixelmap (int x, int y) {
	int Matriks=0;
	if (( x<=FRAME_WIDTH/3 ) && (y<=FRAME_HEIGHT/3)) Matriks = 11; else
	if (((x<=FRAME_WIDTH/3*2) && (x>FRAME_WIDTH/3)) && (y<=FRAME_HEIGHT/3)) Matriks = 12; else
	if (((x<=FRAME_WIDTH ) && (x>FRAME_WIDTH/3*2)) && (y<=FRAME_HEIGHT/3)) Matriks = 13; else
	if (( x<=FRAME_WIDTH/3 ) && (y<=FRAME_HEIGHT/3*2)) Matriks = 21; else
	if (((x<=FRAME_WIDTH/3*2) && (x>FRAME_WIDTH/3)) && (y<=FRAME_HEIGHT/3*2)) Matriks = 22; else
	if (((x<=FRAME_WIDTH ) && (x>FRAME_WIDTH/3*2)) && (y<=FRAME_HEIGHT/3*2)) Matriks = 23; else
	if (( x<=FRAME_WIDTH/3 ) && (y<=FRAME_HEIGHT)) Matriks = 31; else
	if (((x<=FRAME_WIDTH/3*2) && (x>FRAME_WIDTH/3)) && (y<=FRAME_HEIGHT)) Matriks = 32; else
	if (((x<=FRAME_WIDTH ) && (x>FRAME_WIDTH/3*2)) && (y<=FRAME_HEIGHT)) Matriks = 33;
	return (Matriks);
}

void searching2(){

}

void* searching(void *arg){
	if(command==0){
		readWifi();
		//kasus(28);
		pthread_mutex_lock(&locking2);	
		//moving=1;
		//kasus(28);
		commandSearch=0;
		int k=0;
		double refArea=100000;
		bool search=1;
		
		if(commandSearch==0){
			dxl_write_word(idh[1],P_GOAL_POSITION,searchingY[0]);
		}
		moving=0;
        sleep(1);
		
		if(commandSearch==0){
			for(int i=0;i<9;i++){
				readWifi();
				cout<< serY<<endl;
				if(commandSearch==1){serX=searchingX[i]; serY=searchingY[0];}
				if(command==1){i=100;}
				dxl_write_word(idh[0],P_GOAL_POSITION,searchingX[i]); 
				if(commandSearch==1){serX=searchingX[i];serY=searchingY[0];}
				if(command==1){i=100;}
				
				for(int j=0;j<10;j++){
					readWifi();
					usleep(10000);
					cap.read(webcam);
					cvtColor(webcam,hsv,COLOR_BGR2HSV);
					inRange(hsv,Scalar(4,123,91),Scalar(11,255,255),thresh);
					morph(thresh);
					Moments moment = moments (thresh);
					area=moment.m00;
					cout<<"Area: "<<area<<endl;
					//imshow(windowName,webcam);
					if(waitKey(30)>=0){}
				}
            
            if(area>=refArea){commandSearch=1;}
			k=i;
			if(commandSearch==1){serX=searchingX[i];serY=searchingY[0];cout<<"array ke: "<<i<<endl;i=100;}
			if(command==1||WIFI==0){i=100;}
			
			/*cap1.read(webcam);
			cvtColor(webcam,hsv,COLOR_BGR2HSV);
			inRange(hsv,Scalar(4,123,91),Scalar(11,255,255),thresh);
			morph(thresh);
			Moments moment = moments (thresh);
			area=moment.m00;
                        imshow(windowName,webcam);
			if(waitKey(30)>=0){break;}
			if(area>=refArea){break;}
			usleep(100);*/
			}
		}
		//if(area>=refArea){break;}
        if(commandSearch==0){cout<<"masuk"<<endl;
			dxl_write_word(idh[1],P_GOAL_POSITION,searchingY[1]);
		}
        
		if(commandSearch==0){
			cout<<"masuk1"<<endl;
			for(int i=8;i>=0;i--){
				readWifi();
				if(commandSearch==1){serX=searchingX[i];serY=searchingY[1];}
			
				if(command==1){i=-1;}
                		dxl_write_word(idh[0],P_GOAL_POSITION,searchingX[i]);
				
				if(commandSearch==1){serX=searchingX[i];serY=searchingY[1];}
				if(command==1){i=-1;}
				//usleep(1000000);
                
				for(int j=0;j<10;j++){
					readWifi();
                    			usleep(10000);
                    			cap.read(webcam);
                    			cvtColor(webcam,hsv,COLOR_BGR2HSV);
                    			inRange(hsv,Scalar(4,149,175),Scalar(47,255,255),thresh);
                    			morph(thresh);
                    			Moments moment = moments (thresh);
                    			area=moment.m00;
                    			//imshow(windowName,webcam);
		    			cout<<"Area: "<<area<<endl;
                    			if(waitKey(30)>=0){}
				}
                
				if(area>=refArea){commandSearch=1;}
				k=i;
                
				if(commandSearch==1){serX=searchingX[i];serY=searchingY[0];cout<<"array ke: "<<endl;i=-1;}
				if(command==1||WIFI==0){i=-1;}
			}
                
				/*cap1.read(webcam);
                cvtColor(webcam,hsv,COLOR_BGR2HSV);
                inRange(hsv,Scalar(4,123,91),Scalar(11,255,255),thresh);
                morph(thresh);
                Moments moment = moments (thresh);
                area=moment.m00;
				imshow(windowName,webcam);
                if(waitKey(30)>=0){break;}
				if(area>=refArea){break;}
				usleep(30);*/
		}
	}
	if(commandSearch==1){commandMove=0;}
	//commandSearch=0;	
	//kasus(2);
	//moving=2;
	//pos[0]=serX;
	//pos[1]=serY;
	//dxl_write_word(19,P_GOAL_POSITION,serX);
	//dxl_write_word(20,P_GOAL_POSITION,serY);
	pthread_mutex_unlock(&locking2);
}

void* readCam(void *arg){	
	//cout<<"Masuk Function"<<endl;
	int refArea=300000;
	pthread_mutex_lock(&locking);
	//commandCam=1;
	readWifi();
	//VideoCapture cap1=((VideoCapture) arg);
	//cout<<"function"<<endl;
	cap.read(webcam);
	//cout<<"test"<<endl;
    cvtColor(webcam,hsv,COLOR_BGR2HSV);
	//cout<<"function3"<<endl;
    inRange(hsv,Scalar(4,123,91),Scalar(11,255,255),thresh);
	//cout<<"function4"<<endl;
	morph(thresh);
	Moments moment =  moments(thresh);
	//cout<<"function2"<<endl;
    EPMoments(thresh);
    kirimPacket(2,idh,pos,2);
    area=moment.m00;
	//imshow(windowName,thresh);
	if(waitKey(30)>=0){}
	//if(area>=refArea){comms=1;}
	//if(waitKey(30)>=0){}
	//commandCam=0;
	pthread_mutex_unlock(&locking);
}

void* find(void *arg){
	while(commandSearch==1&&WIFI==1){
	 pthread_mutex_lock(&locking4);
	commandFind=1;
	cout<<"masuk function"<<endl;
        cap.read(webcam);
	cout<<serX<<endl;
	//pos[0]=serX;
	//pos[1]=serY;
    cvtColor(webcam,hsv,COLOR_BGR2HSV);
    inRange(hsv,Scalar(4,123,91),Scalar(11,255,255),thresh);
    morph(thresh);
    EPMoments(thresh);
    //kirimPacket(2,idh,pos,2);
    // imshow(windowName,thresh);
	//kasus(5);
	//if(commandMove==0){
		//if(serX<419 && serY>290){moving=2;}
		//else if(serX>622){moving=2;}
		//else if(serY<=290){if(serX>622){moving=4;}else{moving=5;}}
		//else{moving=3;}
		//if(serY<=290){if(serX>419){moving=4;}else{moving=5;}}
	
	//if(commandMove==0&&commandCam==0){
		if(serX<=500){
			if(serY<=275){moving=8;}
			else{moving=7;}
		}
		else if(serX>600){
			if(serY<=275){moving=8;}
			else{moving=8;}
		}
		else{
			if(serY>262){
				if(serX<495){moving=8;}
				else if(serX>622){moving=7;}
				else{moving=31;}	
			}
			else if(serY>100 && serY<=262){
				if(serX<400){moving=4;}
				else if(serX>622){moving=2;}
				else{moving=5;}
			}
			//else{
			//	int arah=bacaMAG(Pmag_raw);
                        //      if(arah<234){moving=8;}
                        //        else if(arah>245){moving=7;}
			//	else{moving=5;}
			//}
		}
			/*if(serX>=560 && serX<=580 && serY<314 && serY>250){	moving=5;	}
			else if(serX<550 && serY>314){moving=8;}
			else if(serX<550 && serY<=314){moving=4;}
			else if(serX>622 && serY<=314){moving=2;}
			else if(serX>622 && serY>314){moving=7;}
			else{	moving=3;	}
		}*/
	//}
	if(command==1){moving=1;}
	//}
    
	if(waitKey(30)>=0){}
	//commandFind=0;
	//moving=0;
	//cout<<"Ngescan"<<endl;
	pthread_mutex_unlock(&locking4);
	}
	commandFind=0;
}

void* moves(void *args){
	//pthread_mutex_lock(&locking3);
	while(commandSearch==1&&WIFI==1){
		readWifi();
		//commandCam=1;
		commandMove=1;
		cout<<"Moving"<<endl;
		//pthread_mutex_lock(&locking3);	
	//if(commandSearch==1&&WIFI==1){	
		switch(moving){
			case 1: kasus(28); break; 
			case 2: kasus(3); break;
			case 4: kasus(4); break;
			case 3: kasus(5); break;
			case 31:kasus(51);break;
			case 5: kasus(7); break;
			case 6: kasus(19); break;
			case 7: kasus(1); break;
			case 8: kasus(2); break;
		}
	//}
		cout<<serX<<", "<<serY<<endl;
		usleep(70000);
		//moving=1;
		kasus(28);
		//commandCam=0;
	}
	//commandMove=0;
	//pthread_mutex_unlock(&locking3);
	commandMove=0;
} 



int search(){
	//VideoCapture cap(0);
	cap.set(CAP_PROP_FRAME_WIDTH,FRAME_WIDTH);
    cap.set(CAP_PROP_FRAME_HEIGHT,FRAME_HEIGHT);
	
	if(!cap.isOpened())
		return -1;
	
	if(dxl_initialize(0,1)==0){
        cout<<"Error connecting"<<endl;
        return 0;
    }
    
    else{
		cout<<"connect success!"<<endl;
	}

	while(1){
		pthread_t thread3, thread4, thread5,thread6;
		if(WIFI==0){
			readWifi();
			kasus(28);
			commandSearch=0;
		}
		
		readWifi();
		if(WIFI==1&&commandSearch==0&&command==0){
			cout<<"Masuk searching"<<endl;
			kasus(28);
			//siapJalan(1,-90);
			kasus(2);
			kasus(28);
			searching(NULL);
		}
		//kirimPacket(2,idh,pos,2);
		readWifi();
		if(WIFI==1&&commandSearch==1&&command==0&&commandMove==0){
			if(command==1){moving=0; commandSearch=0;}
			pthread_create(&thread3,NULL,moves,NULL);
			if(command==1){moving=0; commandSearch=0;}
		}
		readWifi();
		if(WIFI==1&&commandSearch==1&&command==0&& commandFind==0){
			cout<<"masuk ngikutin"<<endl;
			readWifi();
			//sleep(5);
			//cout<<serX<<", "<<serY<<endl;
			if(command==1){commandSearch=0;break;}
			pthread_create(&thread4,NULL,find,NULL);
			//find(NULL);
			if(command==1){commandSearch=0;break;}
			//if(area<50000){
			//commandCam=0;
			//while(commandCam=0){
			//kasus(28);
			//kasus(2);
			//searching(NULL);
			//}
			//}
		}
	}
}
