#include <opencv2/opencv.hpp> 
#include <opencv2/core/core.hpp> 
#include <opencv2/imgproc/imgproc.hpp> 
#include <opencv2/highgui/highgui.hpp> 
#include "/home/pi/systemTest/library/allLib.h"
#include "/home/pi/systemTest/gerakan.cpp"
using namespace cv;
using namespace std;

#define P_GOAL_POSITION 30

const string windowName = "Kamera"; 
const int FRAME_WIDTH = 640; 
const int FRAME_HEIGHT = 480; 
int serX = 512; 
int serY = 512; 
//int id[2]={19,20}; 
int pos[2]={serX,serY}; 
int pos2[2]={600,600}; 
double area; 
int x=0; 
int y=0; 
int statX; 
int statY; 
int lastX;
int lastY;
int commandSearch=0;
int commandCam=0;
int comms=1;
int commandMove=0;
int moving=0;
VideoCapture cap(0);
pthread_mutex_t locking,locking2,locking3,locking4;

Mat webcam; 
Mat hsv;
Mat thresh;

void kirimPacket(int totalServo, int id[],int data[],int datapers); 
void EPMoments(Mat thresh1); 
int pixelmap(int x, int y);
void morph(Mat thresh2);


 void kirimPacket(int totalServo, int id[],int data[],int datapers){
        int l=datapers;
        int n=totalServo;
        int i=0;
        dxl_set_txpacket_id(BROADCAST_ID); //Jangan diubah 0xFE
        //dxl_set_txpacket_length(); //jumlah paket yang dikirim 0x18
        dxl_set_txpacket_instruction(INST_SYNC_WRITE);//instruksi 0x83
	dxl_set_txpacket_parameter(0,P_GOAL_POSITION);//yang mau ditulis 0x1E
        dxl_set_txpacket_parameter(1,2);//Jumlah data per servo
        for( i; i<totalServo;i++){
                dxl_set_txpacket_parameter(2+3*i+0,id[i]);
                dxl_set_txpacket_parameter(2+3*i+1,dxl_get_lowbyte(data[i]));
                dxl_set_txpacket_parameter(2+3*i+2,dxl_get_highbyte(data[i]));
        }
        dxl_set_txpacket_length((l+1)*n+4);
        dxl_txrx_packet();
}




 void morph(Mat thresh2){
        Mat erodeElement = getStructuringElement( MORPH_RECT,Size(3,3));
        Mat dilateElement = getStructuringElement( MORPH_RECT,Size(8,8));
        erode(thresh2,thresh2,erodeElement);
        dilate(thresh2,thresh2,dilateElement);
}

 void EPMoments(Mat thresh1){
    int px,py,ex,ey,temp;
    double refArea = 200000;
    float KpX=0.05;
    float KpY=0.025;
   Moments moment = moments (thresh1);
	area = moment.m00;
	 if(area >= refArea){
		 x = moment.m10/area;
		 y = moment.m01/area;
		if (pixelmap(x,y) != 0)
		temp = pixelmap(x,y);
		switch (temp)
		{
			case 11 : statX= 15; statY= 10; break;
			case 12 : statX= 0; statY= 10; break;
			case 13 : statX=-15; statY= 10; break;
			case 21 : statX= 15; statY= 0; break;
			case 22 : statX= 0; statY= 0; break;
			case 23 : statX=-15; statY= 0; break;
			case 31 : statX= 15; statY=-10; break;
			case 32 : statX= 0; statY=-10; break;
			case 33 : statX=-15; statY=-10; break;
		}
		//PID
		ex=lastX-x; ey=lastY-y;
		if (ex>214 || (ex<24 && ex>-24) || ex<-214) ex=0;
		if (ey>161 || (ey<18 && ey>-18) || ey<-161) ey=0;
		serX=serX+statX;
		serY=serY+statY;
		px=ex*KpX;
		py=ey*KpY;
		if (statX==0) px=0;
		if (statY==0) py=0;
		serY=serY+py;
		serX=serX+px;
		 if (serY < 0){
		serY=1023-serY;
		}
		pos[0]=serX;
		pos[1]=serY;
		printf ("bola : (%d,%d) servo : (%d,%d) Area :(%d)\n",x,y,pos[0],pos[1],area);
	 }
}

int pixelmap (int x, int y) {
	int Matriks=0;
	if (( x<=FRAME_WIDTH/3 ) && (y<=FRAME_HEIGHT/3)) Matriks = 33; else
	if (((x<=FRAME_WIDTH/3*2) && (x>FRAME_WIDTH/3)) && (y<=FRAME_HEIGHT/3)) Matriks = 32; else
	if (((x<=FRAME_WIDTH ) && (x>FRAME_WIDTH/3*2)) && (y<=FRAME_HEIGHT/3)) Matriks = 31; else
	if (( x<=FRAME_WIDTH/3 ) && (y<=FRAME_HEIGHT/3*2)) Matriks = 23; else
	if (((x<=FRAME_WIDTH/3*2) && (x>FRAME_WIDTH/3)) && (y<=FRAME_HEIGHT/3*2)) Matriks = 22; else
	if (((x<=FRAME_WIDTH ) && (x>FRAME_WIDTH/3*2)) && (y<=FRAME_HEIGHT/3*2)) Matriks = 21; else
	if (( x<=FRAME_WIDTH/3 ) && (y<=FRAME_HEIGHT)) Matriks = 13; else
	if (((x<=FRAME_WIDTH/3*2) && (x>FRAME_WIDTH/3)) && (y<=FRAME_HEIGHT)) Matriks = 12; else
	if (((x<=FRAME_WIDTH ) && (x>FRAME_WIDTH/3*2)) && (y<=FRAME_HEIGHT)) Matriks = 11;
	return (Matriks);
}

void* searching(void *arg){
//	kasus(28);
	pthread_mutex_lock(&locking2);	
	commandSearch=1;
	double refArea=50;
	bool search=1;
	if(comms==0){
	dxl_write_word(idh[1],P_GOAL_POSITION,searchingY[0]);}

        sleep(1);
	if(comms==0){
        for(int i=0;i<9;i++){
			if(comms==1){serX=searchingX[i]; serY=searchingY[0];i=100;}
			dxl_write_word(idh[0],P_GOAL_POSITION,searchingX[i]); 
			if(comms==1){serX=searchingX[i];serY=searchingY[0];i=100;}
			usleep(1000000);
			if(comms==1){serX=searchingX[i];serY=searchingY[0];i=100;}
			/*cap1.read(webcam);
			cvtColor(webcam,hsv,COLOR_BGR2HSV);
			inRange(hsv,Scalar(4,123,91),Scalar(11,255,255),thresh);
			morph(thresh);
			Moments moment = moments (thresh);
			area=moment.m00;
                        imshow(windowName,webcam);
			if(waitKey(30)>=0){break;}
			if(area>=refArea){break;}
			usleep(100);*/
	}}
	//if(area>=refArea){break;}
        if(comms==0){
	dxl_write_word(idh[1],P_GOAL_POSITION,searchingY[1]);}
        if(comms==0){
	for(int i=8;i>=0;i--){
			if(comms==1){serX=searchingX[i];serY=searchingY[1];i=-1;}
                        dxl_write_word(idh[0],P_GOAL_POSITION,searchingX[i]);
                        if(comms==1){serX=searchingX[i];serY=searchingY[1];i=-1;}
			usleep(1000000);
			if(comms==1){serX=searchingX[i];serY=searchingY[1];i=-1;}
                        /*cap1.read(webcam);
                        cvtColor(webcam,hsv,COLOR_BGR2HSV);
                        inRange(hsv,Scalar(4,123,91),Scalar(11,255,255),thresh);
                        morph(thresh);
                        Moments moment = moments (thresh);
                        area=moment.m00;
			imshow(windowName,webcam);
                        if(waitKey(30)>=0){break;}
			if(area>=refArea){break;}
			usleep(30);*/}}
	commandSearch=0;	
//	kasus(2);
	pthread_mutex_unlock(&locking2);
}

void* readCam(void *arg){	
//		cout<<"Masuk Function"<<endl;
		int refArea=300000;
		pthread_mutex_lock(&locking);
		commandCam=1;
		//VideoCapture cap1=((VideoCapture) arg);
//		cout<<"function"<<endl;
		cap.read(webcam);
//		cout<<"test"<<endl;
                cvtColor(webcam,hsv,COLOR_BGR2HSV);
//		cout<<"function3"<<endl;
                inRange(hsv,Scalar(4,123,91),Scalar(11,255,255),thresh);
//              cout<<"function4"<<endl;
//		morph(thresh);
		Moments moment =  moments(thresh);
//		cout<<"function2"<<endl;
                EPMoments(thresh);
                //kirimPacket(2,idh,pos,2);
                area=moment.m00;
		imshow(windowName,thresh);
		if(waitKey(30)>=0){}
		if(area>=refArea){comms=1;}
//		if(waitKey(30)>=0){}
		commandCam=0;
		pthread_mutex_unlock(&locking);
}

void* find(void *arg){
//		pthread_mutex_lock(&locking4);
		cout<<"masuk function"<<endl;
                cap.read(webcam);
                pos[0]=serX;
                pos[1]=serY;
                cvtColor(webcam,hsv,COLOR_BGR2HSV);
                inRange(hsv,Scalar(4,123,91),Scalar(11,255,255),thresh);
//              morph(thresh);
                EPMoments(thresh);
                kirimPacket(2,idh,pos,2);
                imshow(windowName,thresh);
		//kasus(5);
		moving=3;
                if(waitKey(30)>=0){}
//		pthread_mutex_unlock(&locking4);
}

void* moves(void *args){
	pthread_mutex_lock(&locking3);	
	commandMove=1;
	switch(moving){
		case 1: kasus(28); break; 
		case 2: kasus(2); break;
		case 3: kasus(5); break;
	}
	commandMove=0;
	pthread_mutex_unlock(&locking3);
} 



int main(){
//	VideoCapture cap(0);
	cap.set(CAP_PROP_FRAME_WIDTH,FRAME_WIDTH);
        cap.set(CAP_PROP_FRAME_HEIGHT,FRAME_HEIGHT);
	if(!cap.isOpened())
		return -1;
	if(dxl_initialize(0,1)==0){
                cout<<"Error connecting"<<endl;
                return 0;
        }
        else{
                cout<<"connect success!"<<endl;
	}
while(1){
		pthread_t thread3, thread4, thread5,thread6;


                if(commandCam==0&&comms==0){
			pthread_create(&thread3,NULL,readCam,NULL);

                }

		if(commandMove==0){
			pthread_create(&thread5,NULL,moves,NULL);
		}

		if(commandSearch==0&&comms==0){
			pthread_create(&thread4,NULL,searching,NULL);		
		}

//		searching(NULL);		
//		while(1){readCam(NULL);}
		if(comms==1){
			moving=28;
			cout<<"Detected"<<endl;
			find(NULL);
			if(area<=50000){
				for(int i=0; i<=6;i++){
					find(NULL);
					if(area>50000){i=7;}
					find(NULL);
					sleep(0.5);
					find(NULL);
					sleep(0.5);






                return 0;
					find(NULL);
					if(i==6){comms=0;moving=0;}
				}
			}
		}
	}
}
